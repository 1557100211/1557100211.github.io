<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://1557100211.github.io</id>
    <title>github博客</title>
    <updated>2020-05-20T07:41:36.185Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://1557100211.github.io"/>
    <link rel="self" href="https://1557100211.github.io/atom.xml"/>
    <subtitle>小舟从此逝，江海寄余生</subtitle>
    <logo>https://1557100211.github.io/images/avatar.png</logo>
    <icon>https://1557100211.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, github博客</rights>
    <entry>
        <title type="html"><![CDATA[Nginx监控工具-GoAccess]]></title>
        <id>https://1557100211.github.io/post/BpGxZ4yx7/</id>
        <link href="https://1557100211.github.io/post/BpGxZ4yx7/">
        </link>
        <updated>2020-05-20T07:25:26.000Z</updated>
        <content type="html"><![CDATA[<h5 id="why-goaccess">Why GoAccess?</h5>
<blockquote>
<p>GoAccess 被设计成快速的并基于终端的日志分析工具。其核心理念是不需要通过 Web 浏览器就能快速分析并实时查看 Web 服务器的统计数据(这对于需要使用 SSH 来对访问日志进行快速分析或者就是喜欢在终端环境下工作的人来说是超赞的)。<br>
终端输出仅仅是默认的输出方式，GoAccess 还支持生成完整的实时 HTML 报告(这对分析、监控以及数据可视化都是极好的)，以及 JSON 和 CSV 格式的报告。</p>
</blockquote>
<h5 id="下载地址">下载地址</h5>
<blockquote>
<p>https://goaccess.io/download</p>
</blockquote>
<h5 id="安装">安装</h5>
<h6 id="yum安装">yum安装</h6>
<pre><code class="language-java">yum install glib2 glib2-devel GeoIP-devel  ncurses-devel zlib zlib-develyum install gcc -y
yum -y install GeoIP-update
yum install goaccess
#修改/etc/nginx/nginx.conf文件的日志存储格式
log_format  main  '$remote_addr - $remote_user [$time_local] requesthost:&quot;$http_host&quot;; &quot;$request&quot; requesttime:&quot;$request_time&quot;; '
        '$status $body_bytes_sent &quot;$http_referer&quot; - $request_body'
        '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';        
#修改文件/etc/goaccess.conf改成goaccess格式标准对应为
time-format %T
date-format %d/%b/%Y
log-format %h - %^ [%d:%t %^] requesthost:&quot;%v&quot;; &quot;%r&quot; requesttime:&quot;%T&quot;; %s %b &quot;%R&quot; - %^&quot;%u&quot;
#测试生成页面
goaccess -f /var/log/nginx/access.log -c -a&gt;/usr/share/nginx/html/go.html
</code></pre>
<h6 id="源码安装">源码安装</h6>
<pre><code class="language-java">#yum安装依赖包
yum install glib2 glib2-devel GeoIP-devel  ncurses-devel zlib zlib-devel
yum install gcc -y
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm
yum -y install GeoIP-update

#下载goaccess源码包，并解压编译安装
wget https://tar.goaccess.io/goaccess-1.2.tar.gz
tar xzvf goaccess-1.2.tar.gz
cd goaccess-1.2/./configure --enable-geoip --enable-utf8make &amp;&amp; make install

#修改/etc/nginx/nginx.conf文件的日志存储格式
log_format  main  '$remote_addr - $remote_user [$time_local] requesthost:&quot;$http_host&quot;; &quot;$request&quot; requesttime:&quot;$request_time&quot;; '
        '$status $body_bytes_sent &quot;$http_referer&quot; - $request_body'                      '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';       
#修改文件/usr/local/etc/goaccess.conf改成goaccess格式标准对应为
time-format %T
date-format %d/%b/%Y
log-format %h - %^ [%d:%t %^] requesthost:&quot;%v&quot;; &quot;%r&quot; requesttime:&quot;%T&quot;; %s %b &quot;%R&quot; - %^&quot;%u&quot;
#测试生成页面
goaccess -f /var/log/nginx/access.log -c -a&gt;/usr/share/nginx/html/go.html
#后台实时生成数据到goaccess页面
/usr/local/bin/goaccess /var/log/nginx/access.log -o /usr/share/nginx/html/go.html  --real-time-html &amp;
</code></pre>
<h5 id="基本语法">基本语法</h5>
<blockquote>
<p>goaccess [ -b ][ -s ][ -e IP_ADDRESS][ - a ] &lt;-f log_file &gt;<br>
参数说明：<br>
-f – 日志文件名<br>
-b – 开启流量统计，如果希望加快分析速度不建议使用该参数<br>
-s – 开启HTTP响应代码统计<br>
-a – 开启用户代理统计<br>
-e – 开启指定IP地址统计，默认禁用<br>
-p -指定goacces用户配置文件路径</p>
</blockquote>
<pre><code class="language-java"> goaccess access2.log -p /etc/goaccess/goaccess.conf -o /mnt/d/dev_soft/goAccess/report.html --real-time-html --port=8888 --geoip-database=/mnt/d/dev_soft/goAccess/GeoLite2-City.mmdb
</code></pre>
<h6 id="配置选项">配置选项</h6>
<blockquote>
<p>GoAccess 拥有多个配置选项。获取完整的最新配置选项列表，请运行：./configure --help</p>
</blockquote>
<ul>
<li>--enable-debug<br>
使用调试标志编译且关闭编译器优化。</li>
<li>--enable-utf8<br>
宽字符支持。依赖 Ncursesw 模块。</li>
<li>--enable-geoip=&lt;legacy|mmdb&gt;<br>
地理位置支持。依赖 MaxMind GeoIP 模块。legacy 将使用原始 GeoIP 数据库。mmdb 将使用增强版 GeoIP2 数据库。</li>
<li>--enable-tcb=&lt;memhash|btree&gt;<br>
Tokyo Cabinet 存储支持。 memhash 将使用 Tokyo Cabinet 的内存哈希数据库。 btree 将使用 Tokyo Cabinet 的磁盘 B+Tree 数据库。</li>
<li>--disable-zlib<br>
禁止在 B+Tree 数据库上使用 zlib 压缩。</li>
<li>--disable-bzip<br>
禁止在 B+Tree 数据库上使用 bzip2 压缩。</li>
<li>--with-getline<br>
使用动态扩展行缓冲区用来解析完整的行请求，否则将使用固定大小(4096)的缓冲区。</li>
<li>--with-openssl<br>
使 GoAccess 与其 WebSocket 服务器之间的通信能够支持 OpenSSL。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tomcat监控工具]]></title>
        <id>https://1557100211.github.io/post/aEGAJiLzW/</id>
        <link href="https://1557100211.github.io/post/aEGAJiLzW/">
        </link>
        <updated>2020-05-20T02:25:09.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>作为系统管理员，要能监控系统状态，包括主机状态（硬盘、内存、CPU）和服务状态（GC、Thread）。如果没有工具，需要远程登录到服务器，费时费力。<br>
推荐一款工具Psi-probe，非常强大，可以监控Tomcat发布服务和主机的性能。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://1557100211.github.io/post-images/1589941600334.png" alt="" loading="lazy"></figure>
<h5 id="psi-probe安装">psi-probe安装</h5>
<ul>
<li>下载源码，编译war。<br>
https://github.com/psi-probe/psi-probe</li>
<li>直接下载war<br>
https://github.com/psi-probe/psi-probe/releases/download/3.1.0/probe.war</li>
<li>安装probe.war。通过Tomcat Manager Deploy war，或者将probe.war放到Tomcat的webapps目录下。</li>
</ul>
<h5 id="功能简介">功能简介</h5>
<p>通过http://host/probe访问服务。<br>
<img src="https://1557100211.github.io/post-images/1589941685911.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[问题总结一、java final常量修改后，新重新编译class并更新所有引用类]]></title>
        <id>https://1557100211.github.io/post/2ZTgQPbdp/</id>
        <link href="https://1557100211.github.io/post/2ZTgQPbdp/">
        </link>
        <updated>2020-05-19T06:40:44.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>线上同事发现了一个问题，更新常量类里面的常量后发现没出现效果，反编译后看结果没变....后续查资料结果：<br>
程序中使用的各种常量用一个类来统一管理，类似：</p>
</blockquote>
<pre><code class="language-java">public class AppConst {  
    public static final String STR_1 = &quot;String1&quot;;  
    public static final String STR_2 = &quot;String2&quot;;  
    ......  
}  
</code></pre>
<p>然后在某些逻辑代码段里使用了这些常量。这样做可以便于管理常量，避免了大量的magic number/text，在修改常量内容时只需改这一个类就行了，但有时候会奇怪地发现，重新编译打包的程序依旧我行我素，并没有即时反应我们对常量的修改，这是何解呢？<br>
在之前的《JVM学习笔记三--类的初始化》中我曾提到，静态常量（即用 static final 修饰的变量）是编译时常量，当一个class文件编译完毕，它内部使用到的所有常量的具体值就已经确定了，不能想当然地以为它在运行时并连接常量管理类之 后才会以引用方式使用常量。比如下面这段代码：</p>
<pre><code class="language-java">import AppConst;  
public class SomeService {  
    public void serviceJob1() {  
        System.out.println(AppConst.STR_1);  
    }  
}  
</code></pre>
<p>类SomeService使用了STR_1这个常量，表面上是通过AppConst类取得的这个值，实际上在SomeService被编译后，其代码其实变成了</p>
<pre><code class="language-java">public class SomeService {  
    public void serviceJob1() {  
        System.out.println(&quot;String1&quot;);  
    }  
}
</code></pre>
<p>这里面根本没有AppConst什么事，所以你即使修改了AppConst的相关常量，令STR_1 = &quot;NotString1&quot;,SomeService可能依然会打印&quot;String1&quot;,因为SomeService的代码没有任何修改，在增量编译的情况 下，它的class文件不会被重新编译。<br>
明白了上面这些，大致就知道怎么办了，我的方法有两个：</p>
<ol>
<li>原始条件下，删除class文件后手动重编译。</li>
<li>使用IDE的时候， 先对SomeService做一个细微修改并保存（会自动编译），然后再修改回来并保存（再次自动编译）。如此class文件就会被更新了。<br>
是这样的，单纯的修改静态变量是没用的，还要重新编辑所有引用静态变量的类，不然不会生效的。<br>
改成</li>
</ol>
<pre><code class="language-java">public class AppConst {    
  public static getString2(){   
              return &quot;String2&quot;;    
  }   
  ......    
}    
</code></pre>
<p>就可以仅仅修改并编译一个类就行了 .<br>
从根本上来解决此问题得这么做，最简单。</p>
<pre><code class="language-java">public class AppConst {     
    public static final String STR_1 = new String(&quot;String1&quot;);     
    public static final String STR_2 = new String(&quot;String2&quot;);     
    public static final int number1=new Integer(123);   
    ......     
}   
</code></pre>
<p>反编译，你会发现在引用此静态类属性的时候，引用代码不是直接用具体值替代，而还是源代码里的引用。</p>
<blockquote>
<p>一句话总结，在静态类里定义的静态属性，坚决不用引用类型，而需要用对象类型。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL数据库统计信息查询]]></title>
        <id>https://1557100211.github.io/post/7v_zfrTYs/</id>
        <link href="https://1557100211.github.io/post/7v_zfrTYs/">
        </link>
        <updated>2020-05-19T06:15:09.000Z</updated>
        <content type="html"><![CDATA[<h4 id="数据库表数量">数据库表数量</h4>
<pre><code class="language-java">#查询MySQL服务中数据库表数据量
SELECT COUNT(*) TABLES, table_schema FROM information_schema.TABLES    GROUP BY table_schema;
#查询指定数据库表数量
SELECT COUNT(*) TABLES, table_schema FROM information_schema.TABLES   WHERE table_schema = 'szdb'
</code></pre>
<h4 id="查询数据库字段">查询数据库字段</h4>
<pre><code class="language-java">#查询一个表中有多少字段
SELECT COUNT(*) FROM information_schema. COLUMNS WHERE table_schema = 'szdb' AND table_name = 'SystemLog';
#查询一个数据库中有多少字段
SELECT COUNT(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'szdb';
#查询数据库中所以表、字段、字段类型、注释等信息
SELECT TABLE_NAME, column_name, DATA_TYPE, column_comment FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'szdb' ;
</code></pre>
<h4 id="查询数据库中持久化的数据量">查询数据库中持久化的数据量</h4>
<blockquote>
<p>MySQL中有一个名为 information_schema 的数据库，在该库中有一个 TABLES 表，这个表主要字段分别：TABLE_SCHEMA : 数据库名，TABLE_NAME：表名，ENGINE：所使用的存储引擎，TABLES_ROWS：记录数，DATA_LENGTH：数据大小，INDEX_LENGTH：索引大小use information_schema；统计数据主要使用的就是这张表了。</p>
</blockquote>
<pre><code class="language-java">#统计数据库中每个表保存的数据量
use information_schema;
SELECT TABLE_NAME, (DATA_LENGTH/1024/1024) as DataM ,(INDEX_LENGTH/1024/1024) as IndexM,((DATA_LENGTH+INDEX_LENGTH)/1024/1024) as AllM,TABLE_ROWS FROM TABLES WHERE TABLE_SCHEMA = 'szdb'

#查询每张表数量
select table_name,table_rows from tables where TABLE_SCHEMA = 'szdb' order by table_rows desc;

#数据库总数量
SELECT sum(table_rows) from tables where TABLE_SCHEMA = 'szdb' order by table_rows desc;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SVN迁移GIT]]></title>
        <id>https://1557100211.github.io/post/mkm2IT70s/</id>
        <link href="https://1557100211.github.io/post/mkm2IT70s/">
        </link>
        <updated>2020-05-18T02:50:28.000Z</updated>
        <content type="html"><![CDATA[<h4 id="迁移过程">迁移过程</h4>
<ol>
<li>拉取svn代码并转为git（输入用户名密码）<pre><code class="language-java">git svn clone   http://xxxx.com/project
</code></pre>
<img src="https://1557100211.github.io/post-images/1589770874769.png" alt="" loading="lazy"></li>
<li>关联远程仓库(保证仓库是新建的并且没有任何提交)<pre><code class="language-java">cd project/
git remote add origin http://xxxx.com/project
</code></pre>
</li>
<li>提交<pre><code class="language-java">git push -u origin master
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mybatis中tinyint(1)转化为boolean]]></title>
        <id>https://1557100211.github.io/post/mybatis-zhong-tinyint1zhuan-hua-wei-boolean/</id>
        <link href="https://1557100211.github.io/post/mybatis-zhong-tinyint1zhuan-hua-wei-boolean/">
        </link>
        <updated>2020-05-18T01:33:36.000Z</updated>
        <content type="html"><![CDATA[<h4 id="问题描述">问题描述:</h4>
<p>使用Mybatis查询tinyint(1)字段数据,返回值为Map类型,那么tinyint(1)的数据默认会转化为boolean类型数据.</p>
<h4 id="解决方案">解决方案:</h4>
<ol>
<li>使用ifnull(column, 0)处理该字段,个人测试过可以;</li>
<li>在jdbcUrl添加参数: tinyInt1isBit=false（默认为true）；</li>
<li>避免使用长度为1的tinyint类型字段存储数字格式的数据;</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[优秀源码推荐]]></title>
        <id>https://1557100211.github.io/post/you-xiu-yuan-ma-tui-jian/</id>
        <link href="https://1557100211.github.io/post/you-xiu-yuan-ma-tui-jian/">
        </link>
        <updated>2020-05-15T09:43:47.000Z</updated>
        <content type="html"><![CDATA[<p>工程</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://1557100211.github.io/post/hello-gridea/</id>
        <link href="https://1557100211.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>